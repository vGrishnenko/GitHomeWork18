{
	"info": {
		"_postman_id": "a67a7e77-c173-457d-8c8e-1a731e3dc5d1",
		"name": "Newman",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "CreateEmail",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const email = pm.variables.replaceIn(\"{{$timestamp}}!{{$randomFirstName}}@metalunits.com\")\r",
							".toLowerCase()\r",
							"\r",
							"pm.collectionVariables.set(\"email\", email);\r",
							"console.log(\"my email = \" + pm.collectionVariables.get(\"email\"));\r",
							"\r",
							"const password = pm.variables.replaceIn(\"{{$randomPassword}}!Cf\");\r",
							"pm.collectionVariables.set(\"password\", password);\r",
							"console.log(\"my password = \" + pm.collectionVariables.get(\"password\"));"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"if (!pm.response.to.have.status(201)) {\r",
							"    postman.setNextRequest(null)\r",
							"    return\r",
							"} \r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"id\", jsonData.id);\r",
							"\r",
							"console.log(\"id value =\" + pm.collectionVariables.get(\"id\"));\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 201, name has string CreateEmail\", function () {\r",
							"    pm.response.to.have.status(201);\r",
							"    pm.response.to.have.status(\"Created\");\r",
							"\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Id should exist, not be null, be a string\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"id\");\r",
							"    pm.expect(jsonData.id).not.eql(null);\r",
							"    pm.expect(jsonData.id).to.be.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Email should exist, not be null, be a string\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"address\");\r",
							"    pm.expect(jsonData.address).not.eql(null);\r",
							"    pm.expect(jsonData.address).to.be.a(\"string\");\r",
							"\r",
							"});\r",
							"\r",
							"pm.test(\"Used should exist, not be null, be a number\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"used\");\r",
							"    pm.expect(jsonData.used).not.eql(null);\r",
							"    pm.expect(jsonData.used).to.be.a(\"number\");\r",
							"\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"address\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/accounts",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts"
					]
				}
			},
			"response": []
		},
		{
			"name": "GetToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"if (!pm.response.to.have.status(200)) {\r",
							"    postman.setNextRequest(null);\r",
							"    return;    \r",
							"}  \r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.collectionVariables.set(\"token\", jsonData.token);\r",
							"\r",
							"console.log(\"value token =\" + pm.collectionVariables.get(\"token\"));\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200, name has string GetToken\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Token should exist, not be null, be a string\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"token\");\r",
							"    pm.expect(jsonData.token).not.eql(null);\r",
							"    pm.expect(jsonData.token).to.be.a(\"string\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n  \"address\": \"{{email}}\",\r\n  \"password\": \"{{password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/token",
					"host": [
						"{{url}}"
					],
					"path": [
						"token"
					]
				}
			},
			"response": []
		},
		{
			"name": "OpenCollectionMessages",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"\r",
							"if (!pm.response.to.have.status(200)) {\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"const jsonData = pm.response.json();\r",
							"\r",
							"\r",
							"pm.test(\"Status code is 200, name has string OpenCollectionMessages\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"    pm.response.to.have.status(\"OK\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Total number of messages, should exist, not be null, be a number\", function () {\r",
							"    pm.expect(jsonData).to.have.property(\"hydra:totalItems\");\r",
							"    pm.expect(jsonData[\"hydra:totalItems\"]).not.eql(null);\r",
							"    pm.expect(jsonData[\"hydra:totalItems\"]).to.be.a(\"number\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/messages",
					"host": [
						"{{url}}"
					],
					"path": [
						"messages"
					]
				}
			},
			"response": []
		},
		{
			"name": "DeleteEmail",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"if (pm.response.to.have.status(204)) {\r",
							"    postman.setNextRequest(null);\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 204, name has string DeleteEmail\", function () {\r",
							"    pm.response.to.have.status(204);\r",
							"    pm.response.to.have.status(\"No Content\");\r",
							"\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "bearer",
					"bearer": [
						{
							"key": "token",
							"value": "{{token}}",
							"type": "string"
						}
					]
				},
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{url}}/accounts/{{id}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"accounts",
						"{{id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "url",
			"value": "https://api.mail.tm"
		},
		{
			"key": "email",
			"value": ""
		},
		{
			"key": "password",
			"value": ""
		},
		{
			"key": "token",
			"value": ""
		},
		{
			"key": "id",
			"value": ""
		}
	]
}
